module mix_column (
  input  logic [127:0] in ,
  output logic [127:0] out
);
  logic [7:0] inp      [ 0:3][0:3];
  logic [7:0] c        [ 0:3][0:3];
  logic [7:0] mul_mat  [ 0:3][0:3];
  logic [7:0] mul      [ 3:0]     ;
  logic [7:0] const_mat[0:15]     ;
  logic [7:0] mul      [ 0:3]     ;


  assign {inp[0][0],inp[0][1],inp[0][2],inp[0][3],
          inp[1][0],inp[1][1],inp[1][2],inp[1][3],
          inp[2][0],inp[2][1],inp[2][2],inp[2][3],
          inp[3][0],inp[3][1],inp[3][2],inp[3][3]}=in;

  assign {c[0][0],c[0][1],c[0][2],c[0][3],
          c[1][0],c[1][1],c[1][2],c[1][3],
          c[2][0],c[2][1],c[2][2],c[2][3],
          c[3][0],c[3][1],c[3][2],c[3][3]}=const_mat;

  assign const_mat = {8'h02,8'h01,8'h01,8'h03,
    8'h03,8'h02,8'h01,8'h01,
    8'h01,8'h03,8'h02,8'h01,
    8'h01,8'h01,8'h03,8'h02} ;

  genvar i;
  generate
    for ( i = 0; i < 4; i++) begin
      for (j = 0; j < 4; j++) begin
        for (int k = 0; k < 4; k++) begin
          gf_mul gf_mul_0 (
            .a(c[i][k]),
            .b(s[k][j]),
            .result(mul[k])
          );
        end
        mul_mat[i][j] = mul[0] ^ mul[1] ^ mul[2] ^ mul[3];
      end
    end
  endgenerate
endmodule 